df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q7. Do you believe this advanced automation \nhas led to the replacement of any jobs in your work environment?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 38
No 72')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q8. With the growth of advanced automation, \ndo you fear for your own job in the future?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 63
No 47')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q9. Do you currently use cloud services \nin any aspect of your day-to-day job?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
"Increase" 59
"Decrease" 8
"Stay the Same" 43')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q10. Do you intend to increase your use of cloud services \nor decrease your use over the next 12 months?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
"It reduces" 32
"It increases" 18
"Stay the Same" 59')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q11. By moving to cloud based services do you believe \nit reduces the amount of IT personnel needed in your company?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
"Yes, more" 44
"No, less" 19
"The Same" 47')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q12. By moving some or all IT function to cloud services, \ndo you find yourself more productive?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
"Yes, more" 30
"No, less" 17
"The Same" 62')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q13. By moving to cloud services, do you find yourself \nworking more, outside your normal paid hours?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 68
No 42')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q16. Do you currently use any data centre \nfacilities for your own IT hardware?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 48
No 63')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q18. Are you concerned which data centre \nis used to house your cloud services?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Increase 55
Decrease 14
"Stay the Same" 40')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q19. Do you believe job opportunities in the IT sector \nwill continue to increase or decrease?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 97
No 12')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q20. Do you believe education will be more \nimportant for job opportunities in the future?"
p = barplt(df, title=title)
df = read.table(header=TRUE, text = '
cat cnt
Yes 56
No 53')
df = within(df, {pct = cnt / sum(cnt)})
# make barplot
title = "Q22. Do you know anyone with the relevant qualifications \nwho has found it hard to find employment in the IT sector?"
p = barplt(df, title=title)
216/24
24*9
24*9*10
216/24
396.13/40
install.packages("devtools")
devtools::install_github("gmlang/ezplot")
devtools::install_github("gmlang/loans")
25000 / 100 + 80.60
proj_path = "~/score-loan-applicants"
dir.create(proj_path, showWarnings=FALSE)
library(ezplot)
library(loans)
str(upl, vec.len=3)
names(upl)
250*0.2
str(upl, vec.len=3)
?upl
iv_cat = c("bankruptcy", "purpose", "exist_customer", "unspent_convictions",
"conviction", "repossess", "own_property", "late_repayments",
"marital", "employment")
for (var in iv_cat) upl[[var]] = as.character(upl[[var]])
str(upl[, iv_cat], vec.len=3)
n = nrow(upl)
vars = names(upl)
varsNA = pctNA = c()
for (var in vars) {
cntNA = sum(is.na(upl[[var]]))
if (cntNA > 0) {
varsNA = c(varsNA, var)
pctNA = c(pctNA, cntNA/n)
}
}
pctNA = paste0(round(pctNA*100, 2), "%")
pct_missing = data.frame(vars=varsNA, percent_missing = pctNA)
print(pct_missing)
pct_good_n_bad = function(dat, yvar, xvar = ""){
# dat: a data frame
# yvar, xvar: string, names of variables on dat
if (xvar == "") tbl = data.frame(table(dat[[yvar]]))
else tbl = data.frame(table(dat[[yvar]][is.na(dat[[xvar]])]))
tbl$percent = tbl$Freq / sum(tbl$Freq)
tbl$Freq = NULL
names(tbl) = c(yvar, "percent")
tbl
}
tbl = pct_good_n_bad(upl, "bad")
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers")
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
tbl = add_bar_label_pos(tbl)
tbl
tbl = add_bar_label_pos(tbl)
tbl
tbl = pct_good_n_bad(upl, "bad")
tbl
tbl = add_bar_label_pos(tbl)
tbl
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
f(tbl, "pct")
f(tbl, "bad", "pct")
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
f(tbl, "bad", "pct")
str(tbl)
f(tbl, "bad", "percent")
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
f(tbl, "bad", "percent")
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent")
tbl
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers", barlab="percent",
barlab_at_top=F, barlab_use_pct=F)
p
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent")
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers", barlab="percent",
barlab_at_top=T, barlab_use_pct=T)
p
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent", vpos=0.02)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers", barlab="percent",
barlab_at_top=T, barlab_use_pct=T, barlab_size=4)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent", vpos=0.04)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers", barlab="percent",
barlab_at_top=T, barlab_use_pct=T, barlab_size=4)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
names(upl)
str(upl)
library(loans)
str(upl, vec.len=3)
upl
str(upl, vec.len=3)
proj_path = "~/score-loan-applicants"
library(ezplot)
library(loans)
str(upl, vec.len=3)
upl$bad = as.factor(upl$bad)
pct_good_n_bad = function(dat, yvar, xvar = ""){
# dat: a data frame
# yvar, xvar: string, names of variables on dat
if (xvar == "") tbl = data.frame(table(dat[[yvar]]))
else tbl = data.frame(table(dat[[yvar]][is.na(dat[[xvar]])]))
tbl$percent = tbl$Freq / sum(tbl$Freq)
tbl$Freq = NULL
names(tbl) = c(yvar, "percent")
tbl
}
tbl = pct_good_n_bad(upl, "bad")
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent", vpos=0.04)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad", legend=F,
main = "Proportion of Good and Bad Customers", barlab="percent",
barlab_at_top=T, barlab_use_pct=T, barlab_size=4)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
iv_cat = c("bankruptcy", "purpose", "exist_customer", "unspent_convictions",
"conviction", "repossess", "own_property", "late_repayments",
"marital", "employment")
for (var in iv_cat) upl[[var]] = as.character(upl[[var]])
str(upl[, iv_cat], vec.len=3)
str(upl)
n = nrow(upl)
vars = names(upl)
varsNA = pctNA = c()
for (var in vars) {
cntNA = sum(is.na(upl[[var]]))
if (cntNA > 0) {
varsNA = c(varsNA, var)
pctNA = c(pctNA, cntNA/n)
}
}
pctNA = paste0(round(pctNA*100, 2), "%")
pct_missing = data.frame(vars = varsNA, percent_missing = pctNA)
print(pct_missing)
for (var in varsNA) {
tbl = pct_good_n_bad(upl, "bad", var)
title = paste("Percent of good and bad customers \namongst applicants with missing \nvalues for", var)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad",
main = title, legend=F)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
cat('\r\n\r\n')
}
for (var in varsNA) {
tbl = pct_good_n_bad(upl, "bad", var)
title = paste("Percent of good and bad customers amongst applicants with missing \nvalues for", var)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad",
main = title, legend=F)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
cat('\r\n\r\n')
}
for (var in varsNA) {
tbl = pct_good_n_bad(upl, "bad", var)
title = paste("Percent of good and bad customers \namongst applicants with missing values for", var)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad",
main = title, legend=F)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
cat('\r\n\r\n')
}
for (var in varsNA) {
tbl = pct_good_n_bad(upl, "bad", var)
title = paste("Percent of good and bad customers \namongst applicants with missing values for", var)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad",
main = title, legend=F)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
cat('\r\n\r\n')
}
for (var in varsNA) {
# calculate the percent of good and bad customers amongst customers
# with missing values in var
tbl = pct_good_n_bad(upl, "bad", var)
# append a column of label positions to tbl
f = add_bar_label_pos(tbl)
tbl = f("bad", "percent", vpos=0.04)
# draw bar plot
title = paste("Percent of good and bad customers \namongst applicants with missing values for", var)
plt = mk_barplot(tbl)
p = plt("bad", "percent", fillby="bad", xlab="0 - Good, 1 - Bad",
main = title, legend=F, barlab="percent", barlab_at_top=T,
barlab_use_pct=T, barlab_size=4)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.2)
print(p)
#         cat('\r\n\r\n')
}
str(upl$market_value)
print(varsNA)
upl$market_value[upl$own_property == 0 & is.na(upl$market_value)] = 0
# treat missing values
for (var in varsNA) {
if (class(upl[[var]]) == "character") {
print(var)
upl[[var]][is.na(upl[[var]])] = "unknown"
print(table(upl[[var]]))
} else {
print(var)
upl[[var]][is.na(upl[[var]])] = median(upl[[var]], na.rm=T)
print(summary(upl[[var]]))
}
}
for (var in iv_cat) upl[[var]] = as.factor(upl[[var]])
data_path = file.path(proj_path, "data")
dir.create(data_path, showWarnings=F)
save(upl, iv_cat, file=file.path(data_path, "cleaned-01.rda"))
rm(list=ls())
opts_knit$set(out.format = "markdown")
library(knitr)
install.packages("knitr")
rm(list=ls())
opts_knit$set(out.format = "markdown")
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-01-clean-data.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-01-clean-data.Rmd")
knitr::knit(file_in)
file_in = file.path(rmd_path, "02-01-clean-data.Rmd")
knitr::knit(file_in)
file_in = file.path(rmd_path, "02-01-clean-data.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-01-clean-data.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(ezplot)
# count different clarities
tbl = table(ggplot2::diamonds$clarity) # use diamonds data in the ggplot2 library
tbl_cnt = data.frame(cbind(freq=tbl))
tbl_cnt$clarity = row.names(tbl_cnt)
row.names(tbl_cnt) = NULL
# add clarity percentages
tbl = within(tbl_cnt, {pct = freq / sum(freq)})
tbl
f = add_bar_label_pos(tbl)
tbl_w_pos = f("clarity", "freq", vpos=500)
tbl_w_pos
f = add_bar_label_pos(tbl_w_pos)
tbl_w_pos = f("clarity", "pct", vpos=0.01)
tbl_w_pos
barplt = mk_barplot(tbl_w_pos)
p = barplt("clarity", "freq", fillby="clarity", legend=F, barlab="freq")
p = scale_axis(p, use_comma=T)
print(p)
p = barplt("clarity", "freq", fillby="clarity", legend=F, barlab="freq",
barlab_at_top=T)
p = scale_axis(p, use_comma=T)
print(p)
p = barplt("clarity", "freq", fillby="clarity", legend=F, barlab="pct",
barlab_use_pct=T)
p = scale_axis(p, use_comma=T)
print(p)
p = barplt("clarity", "freq", fillby="clarity", legend=F, barlab="pct",
barlab_use_pct=T, barlab_at_top=T)
p = scale_axis(p, use_comma=T)
print(p)
p = barplt("clarity", "pct", fillby="clarity", legend=F, barlab="pct",
barlab_use_pct=T)
p = scale_axis(p, use_pct=T, pct_max=0.3, pct_jump=0.05)
print(p)
p = barplt("clarity", "pct", fillby="clarity", legend=F, barlab="pct",
barlab_use_pct=T, barlab_at_top=T)
p = scale_axis(p, use_pct=T, pct_max=0.3, pct_jump=0.05)
print(p)
# make some data
df = read.table(header=TRUE, text='
student grade
Joe 90
Mary 75
Alex 50')
df$pct = df$grade / sum(df$grade)
df2 = read.table(header=TRUE, text='
group level val
A      small 1.8
A      medium 2.2
A      large 1.5
B      small 2.0
B      medium 2.6
B      large 1.0
C      small 2.5
C      medium 1.3
C      large 2.9')
# calculate the percentage of the levels within each group
library(tidyr)
library(dplyr)
pct = df2 %>% spread(level, val)
temp = pct[, 2:4]
pct = cbind(group=pct[, 1], temp / apply(temp, 1, sum))
pct = pct %>% gather(level, pct, -group)
pct$level = factor(pct$level, levels=c("small", "medium", "large"))
# make barplots
library(ezplot)
barplt = mk_barplot(df)
barplt("student", "grade", fillby="student")
barplt("student", "grade", fillby="student", legend=F)
barplt("student", "pct", fillby="student", legend=F, ypct=T)
barplt("student", "pct", fillby="student", legend=F)
barplt = mk_barplot(df2)
barplt("group", "val", fillby="level")
barplt = mk_barplot(pct)
p = barplt("group", "pct", "level")
scale_axis(p, "y", use_pct=T)
p = scale_axis(p, "y", use_pct=T, pct_jump=0.1)
p
cbPalette = palette("cb_gray")
cbbPalette = palette("cb_black")
p + ggplot2::scale_fill_manual(values=cbPalette)
p + ggplot2::scale_fill_manual(values=cbbPalette)
red = palette("red")
purple = palette("purple")
green = palette("green")
p + ggplot2::scale_fill_manual(values=c(red, purple, green))
# use RColorBrewer palettes
p + ggplot2::scale_fill_brewer()
p + ggplot2::scale_fill_brewer(palette="Set1")
p + ggplot2::scale_fill_brewer(palette="Spectral")
library(ezplot)
plt = mk_boxplot(films)
# plot distributions of budget over the years
title1 = "Annual Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget", main=title1)
p = scale_axis(p, "y", use_comma=T)
print(p)
scale_axis(p, use_log10=T)
# plot distributions of boxoffice over the years
title2 = "Annual Distribution of Boxoffice from 1913 to 2014"
p = plt("year", "boxoffice", ylab="boxoffice", main=title2)
start = min(films$year)
end = max(films$year)
p = scale_axis(p, "y", use_log10=T)
p = p + ggplot2::scale_x_continuous(limits = c(start, end),
breaks = seq(start, end, 10))
print(p)
p = plt("year_cat", "boxoffice", ylab="boxoffice")
print(p)
scale_axis(p, use_log10=T)
# plot distributions of budget at each aggregated year level
p = plt("year_cat", "budget", ylab="boxoffice", legend=F)
scale_axis(p, use_log10=T)
library(ezplot)
f = mk_distplot(iris)
f("Sepal.Length")
f("Sepal.Length", binw=0.3)
f("Sepal.Length", binw=0.3, add_vline_mean=T)
f("Sepal.Length", binw=0.3, add_vline_median=T)
f("Sepal.Length", binw=0.3, add_vline_mean=T, add_vline_median=T)
f("Sepal.Length", type="density")
f("Sepal.Length", type="density", add_vline_mean=T)
f("Sepal.Length", type="density", add_vline_median=T)
f("Sepal.Length", type="density", add_vline_median=T, add_vline_mean=T)
f("Sepal.Length", fillby="Species")
f("Sepal.Length", fillby="Species", binw=0.3)
f("Sepal.Length", fillby="Species", binw=0.3, add_vline_mean=T)
f("Sepal.Length", fillby="Species", binw=0.3, add_vline_median=T)
f("Sepal.Length", fillby="Species", type="density")
f("Sepal.Length", fillby="Species", type="density", add_vline_mean=T)
f("Sepal.Length", fillby="Species", type="density", add_vline_median=T)
# make web friendly
p = f("Sepal.Length")
web_display(p)
p = f("Sepal.Length", fillby="Species", binw=0.3)
web_display(p, legend_pos="none")
web_display(p, legend_pos="top")
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
nba$Name <- with(nba, reorder(Name, PTS))
library(reshape2)
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform, rescale = scales::rescale(value))
f = mk_heatmap(nba.m)
f("variable", "Name", "rescale", legend=F)
install.packages("reshape2")
