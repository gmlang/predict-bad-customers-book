})
# collapse to a data frame
result = do.call(rbind, list_of_fits)
# sort and print
res = result[order(result$AIC),]
res[1,]
res[2,]
dat = read.table(header=F, text = "0.44 0.68 511.14
0.99 0.23 717.1
0.84 0.29 607.91
0.28 0.45 270.4
0.07 0.83 289.88
0.66 0.8 830.85
0.73 0.92 1038.09
0.57 0.43 455.19
0.43 0.89 640.17
0.27 0.95 511.06
0.43 0.06 177.03
0.87 0.91 1242.52
0.78 0.69 891.37
0.9 0.94 1339.72
0.41 0.06 169.88
0.52 0.17 276.05
0.47 0.66 517.43
0.65 0.43 522.25
0.85 0.64 932.21
0.93 0.44 851.25
0.41 0.93 640.11
0.36 0.43 308.68
0.78 0.85 1046.05
0.69 0.07 332.4
0.04 0.52 171.85
0.17 0.15 109.55
0.68 0.13 361.97
0.84 0.6 872.21
0.38 0.4 303.7
0.12 0.65 256.38
0.62 0.17 341.2
0.79 0.97 1194.63
0.82 0.04 408.6
0.91 0.53 895.54
0.35 0.85 518.25
0.57 0.69 638.75
0.52 0.22 301.9
0.31 0.15 163.38
0.6 0.02 240.77
0.99 0.91 1449.05
0.48 0.76 609.0
0.3 0.19 174.59
0.58 0.62 593.45
0.65 0.17 355.96
0.6 0.69 671.46
0.95 0.76 1193.7
0.47 0.23 278.88
0.15 0.96 411.4
0.01 0.03 42.08
0.26 0.23 166.19
0.01 0.11 58.62
0.45 0.87 642.45
0.09 0.97 368.14
0.96 0.25 702.78
0.63 0.58 615.74
0.06 0.42 143.79
0.1 0.24 109.0
0.26 0.62 328.28
0.41 0.15 205.16
0.91 0.95 1360.49
0.83 0.64 905.83
0.44 0.64 487.33
0.2 0.4 202.76
0.43 0.12 202.01
0.21 0.22 148.87
0.88 0.4 745.3
0.31 0.87 503.04
0.99 0.99 1563.82
0.23 0.26 165.21
0.79 0.12 438.4
0.02 0.28 98.47
0.89 0.48 819.63
0.02 0.56 174.44
0.92 0.03 483.13
0.72 0.34 534.24
0.3 0.99 572.31
0.86 0.66 957.61
0.47 0.65 518.29
0.79 0.94 1143.49
0.82 0.96 1211.31
0.9 0.42 784.74
0.19 0.62 283.7
0.7 0.57 684.38
0.7 0.61 719.46
0.69 0.0 292.23
0.98 0.3 775.68
0.3 0.08 130.77
0.85 0.49 801.6
0.73 0.01 323.55
1.0 0.23 726.9
0.42 0.94 661.12
0.49 0.98 771.11
0.89 0.68 1016.14
0.22 0.46 237.69
0.34 0.5 325.89
0.99 0.13 636.22
0.28 0.46 272.12
0.87 0.36 696.65
0.23 0.87 434.53
0.77 0.36 593.86")
names(dat)
names(dat) = c(paste0("x", 1:p), y)
dat = read.table(header=F, text = "0.44 0.68 511.14
0.99 0.23 717.1
0.84 0.29 607.91
0.28 0.45 270.4
0.07 0.83 289.88
0.66 0.8 830.85
0.73 0.92 1038.09
0.57 0.43 455.19
0.43 0.89 640.17
0.27 0.95 511.06
0.43 0.06 177.03
0.87 0.91 1242.52
0.78 0.69 891.37
0.9 0.94 1339.72
0.41 0.06 169.88
0.52 0.17 276.05
0.47 0.66 517.43
0.65 0.43 522.25
0.85 0.64 932.21
0.93 0.44 851.25
0.41 0.93 640.11
0.36 0.43 308.68
0.78 0.85 1046.05
0.69 0.07 332.4
0.04 0.52 171.85
0.17 0.15 109.55
0.68 0.13 361.97
0.84 0.6 872.21
0.38 0.4 303.7
0.12 0.65 256.38
0.62 0.17 341.2
0.79 0.97 1194.63
0.82 0.04 408.6
0.91 0.53 895.54
0.35 0.85 518.25
0.57 0.69 638.75
0.52 0.22 301.9
0.31 0.15 163.38
0.6 0.02 240.77
0.99 0.91 1449.05
0.48 0.76 609.0
0.3 0.19 174.59
0.58 0.62 593.45
0.65 0.17 355.96
0.6 0.69 671.46
0.95 0.76 1193.7
0.47 0.23 278.88
0.15 0.96 411.4
0.01 0.03 42.08
0.26 0.23 166.19
0.01 0.11 58.62
0.45 0.87 642.45
0.09 0.97 368.14
0.96 0.25 702.78
0.63 0.58 615.74
0.06 0.42 143.79
0.1 0.24 109.0
0.26 0.62 328.28
0.41 0.15 205.16
0.91 0.95 1360.49
0.83 0.64 905.83
0.44 0.64 487.33
0.2 0.4 202.76
0.43 0.12 202.01
0.21 0.22 148.87
0.88 0.4 745.3
0.31 0.87 503.04
0.99 0.99 1563.82
0.23 0.26 165.21
0.79 0.12 438.4
0.02 0.28 98.47
0.89 0.48 819.63
0.02 0.56 174.44
0.92 0.03 483.13
0.72 0.34 534.24
0.3 0.99 572.31
0.86 0.66 957.61
0.47 0.65 518.29
0.79 0.94 1143.49
0.82 0.96 1211.31
0.9 0.42 784.74
0.19 0.62 283.7
0.7 0.57 684.38
0.7 0.61 719.46
0.69 0.0 292.23
0.98 0.3 775.68
0.3 0.08 130.77
0.85 0.49 801.6
0.73 0.01 323.55
1.0 0.23 726.9
0.42 0.94 661.12
0.49 0.98 771.11
0.89 0.68 1016.14
0.22 0.46 237.69
0.34 0.5 325.89
0.99 0.13 636.22
0.28 0.46 272.12
0.87 0.36 696.65
0.23 0.87 434.53
0.77 0.36 593.86")
p = ncol(dat)-1
names(dat) = c(paste0("x", 1:p), "y")
names(dat)
names(dat)
predictors = names(dat)[names(dat) != "y"]
predictors
paste0("I(", predictors, "^2)")
poly_terms = paste0("I(", predictors, "^2)")
predictors = c(predictors, poly_terms)
outcome = "y"
dataset = dat
# create list of models
list_of_models = lapply(seq_along(predictors), function(n) {
left.hand.side = outcome
right.hand.side = apply(combn(predictors, n), 2, paste, collapse = " + ")
paste(left.hand.side, right.hand.side, sep = " ~ ")
})
vec_of_models = unlist(list_of_models)
list_of_fits = lapply(vec_of_models, function(x) {
formula = as.formula(x)
fit = lm(formula, data=dataset)
result.AIC = extractAIC(fit)
data.frame(num.predictors = result.AIC[1],
AIC = result.AIC[2],
model = x)
})
result = do.call(rbind, list_of_fits)
res = result[order(result$AIC),]
res[1,]
dat = read.table(header=F, text = "0.44 0.68 511.14
0.99 0.23 717.1
0.84 0.29 607.91
0.28 0.45 270.4
0.07 0.83 289.88
0.66 0.8 830.85
0.73 0.92 1038.09
0.57 0.43 455.19
0.43 0.89 640.17
0.27 0.95 511.06
0.43 0.06 177.03
0.87 0.91 1242.52
0.78 0.69 891.37
0.9 0.94 1339.72
0.41 0.06 169.88
0.52 0.17 276.05
0.47 0.66 517.43
0.65 0.43 522.25
0.85 0.64 932.21
0.93 0.44 851.25
0.41 0.93 640.11
0.36 0.43 308.68
0.78 0.85 1046.05
0.69 0.07 332.4
0.04 0.52 171.85
0.17 0.15 109.55
0.68 0.13 361.97
0.84 0.6 872.21
0.38 0.4 303.7
0.12 0.65 256.38
0.62 0.17 341.2
0.79 0.97 1194.63
0.82 0.04 408.6
0.91 0.53 895.54
0.35 0.85 518.25
0.57 0.69 638.75
0.52 0.22 301.9
0.31 0.15 163.38
0.6 0.02 240.77
0.99 0.91 1449.05
0.48 0.76 609.0
0.3 0.19 174.59
0.58 0.62 593.45
0.65 0.17 355.96
0.6 0.69 671.46
0.95 0.76 1193.7
0.47 0.23 278.88
0.15 0.96 411.4
0.01 0.03 42.08
0.26 0.23 166.19
0.01 0.11 58.62
0.45 0.87 642.45
0.09 0.97 368.14
0.96 0.25 702.78
0.63 0.58 615.74
0.06 0.42 143.79
0.1 0.24 109.0
0.26 0.62 328.28
0.41 0.15 205.16
0.91 0.95 1360.49
0.83 0.64 905.83
0.44 0.64 487.33
0.2 0.4 202.76
0.43 0.12 202.01
0.21 0.22 148.87
0.88 0.4 745.3
0.31 0.87 503.04
0.99 0.99 1563.82
0.23 0.26 165.21
0.79 0.12 438.4
0.02 0.28 98.47
0.89 0.48 819.63
0.02 0.56 174.44
0.92 0.03 483.13
0.72 0.34 534.24
0.3 0.99 572.31
0.86 0.66 957.61
0.47 0.65 518.29
0.79 0.94 1143.49
0.82 0.96 1211.31
0.9 0.42 784.74
0.19 0.62 283.7
0.7 0.57 684.38
0.7 0.61 719.46
0.69 0.0 292.23
0.98 0.3 775.68
0.3 0.08 130.77
0.85 0.49 801.6
0.73 0.01 323.55
1.0 0.23 726.9
0.42 0.94 661.12
0.49 0.98 771.11
0.89 0.68 1016.14
0.22 0.46 237.69
0.34 0.5 325.89
0.99 0.13 636.22
0.28 0.46 272.12
0.87 0.36 696.65
0.23 0.87 434.53
0.77 0.36 593.86")
p = ncol(dat)-1
names(dat) = c(paste0("x", 1:p), "y")
lst_of_models
?extractAIC
utils::example(glm)
extractAIC(glm.D93)
proj_path = "~/score-loan-applicants"
data_path = file.path(proj_path, 'data')
file_path = file.path(data_path, 'cleaned-02.rda')
load(file_path)
WoE_n_IV = function(dat, yvar, xvar) {
# dat: data frame
# yvar, xvar: strings
woe = iv = NULL
if (class(dat[[xvar]]) == "factor") {
tbl = table(dat[[yvar]], dat[[xvar]])
good = drop(tbl["0", ])
bad = drop(tbl["1", ])
# calculate percent of good and bad customers
good_pct = good / sum(good)
bad_pct = bad  / sum(bad)
# calculate WOE and IV for each level
woe = log(good_pct / bad_pct)
iv = (good_pct - bad_pct) * woe
}
if (class(dat[[xvar]]) == "numeric") {
# sort dat[[xvar]]
sorted_idx = order(dat[[xvar]])
y = as.numeric(dat[[yvar]][sorted_idx])
# split the continuous xvar into 10 bins
ttl_num = length(dat[[xvar]])
bin = 10
n = ttl_num %/% bin
# count the number of good and bad for each bin
good = rep(0, bin)
bad = rep(0, bin)
for (i in 1:bin) { # calculate PSI for ith bin
if (i != bin) {
good[i] = sum(y[((i-1)*n+1):(n*i)])
bad[i] = n-good[i]
} else {
good[i] = sum(y[((i-1)*n+1):ttl_num])
bad[i] = ttl_num - n*(i-1) - good[i]
}
}
# calculate WOE and IV for each bin
good_pct = good / sum(good)
bad_pct = bad / sum(bad)
woe = rep(0, bin)
iv = rep(0, bin)
for (i in 1:bin) {
woe[i] = log(good_pct[i] / bad_pct[i])
iv[i] = (good_pct[i] - bad_pct[i]) * woe[i]
}
}
# put results in a data frame and return it
out = data.frame(WOE = woe, IV = iv)
out = cbind(x=row.names(out), out)
names(out)[1] = xvar
rownames(out) = NULL
out
}
predictors = c(iv_cat_strong, iv_cat_weak, iv_cat_none, iv_con_strong,
iv_con_weak, iv_con_none)
IV = rep(0, length(predictors))
library(knitr)
predictors = c(iv_cat_strong, iv_cat_weak, iv_cat_none, iv_con_strong,
iv_con_weak, iv_con_none)
IV = rep(0, length(predictors))
for (i in 1:length(predictors)) {
var = predictors[i]
WOE_IV = WoE_n_IV(dat, "bad", var)
print(kable(WOE_IV, row.names = FALSE, format = "pandoc", caption=var))
cat("\n")
# sum up IV components for each predictor
IV[i] = sum(WOE_IV$IV)
}
predictors = c(iv_cat_strong, iv_cat_weak, iv_cat_none, iv_con_strong,
iv_con_weak, iv_con_none)
IV = rep(0, length(predictors))
for (i in 1:length(predictors)) {
var = predictors[i]
WOE_IV = WoE_n_IV(upl, "bad", var)
print(kable(WOE_IV, row.names = FALSE, format = "pandoc", caption=var))
cat("\n")
# sum up the IV components for each predictor
IV[i] = sum(WOE_IV$IV)
}
IV = data.frame(predictor = predictors, IV=IV)
IV$predictive_power[IV$IV < 0.02] = "Useless"
IV$predictive_power[0.02 <= IV$IV & IV$IV < 0.1] = "Weak"
IV$predictive_power[0.1 <= IV$IV & IV$IV < 0.3] = "Medium"
IV$predictive_power[0.3 <= IV$IV & IV$IV < 0.5] = "Strong"
IV$predictive_power[0.5 <= IV$IV] = "Too good to be true"
kable(IV, row.names = FALSE, format = "pandoc", caption="Information Value")
IV = data.frame(predictor = predictors, IV=IV)
IV
IV = rep(0, length(predictors))
for (i in 1:length(predictors)) {
var = predictors[i]
WOE_IV = WoE_n_IV(upl, "bad", var)
print(kable(WOE_IV, row.names = FALSE, format = "pandoc", caption=var))
cat("\n")
# sum up the IV components for each predictor
IV[i] = sum(WOE_IV$IV)
}
IV = data.frame(predictor = predictors, IV=IV)
IV
IV$predictive_power[IV$IV < 0.02] = "Useless"
IV$predictive_power[0.02 <= IV$IV & IV$IV < 0.1] = "Weak"
IV$predictive_power[0.1 <= IV$IV & IV$IV < 0.3] = "Medium"
IV$predictive_power[0.3 <= IV$IV & IV$IV < 0.5] = "Strong"
IV$predictive_power[0.5 <= IV$IV] = "Too good to be true"
kable(IV, row.names = FALSE, format = "pandoc", caption="Information Value")
IV_none = as.character(with(IV, predictor[predictive_power=="Useless"]))
print(IV_none)
IV_weak = as.character(with(IV, predictor[predictive_power=="Weak"]))
IV_medium = as.character(with(IV, predictor[predictive_power=="Medium"]))
IV_strong = as.character(with(IV, predictor[predictive_power=="Strong"]))
IV_extra_strong = as.character(with(IV, predictor[predictive_power=="Too good to be true"]))
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/score-loan-applicants-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-03-WoE-n-IV.Rmd")
knitr::knit(file_in)
